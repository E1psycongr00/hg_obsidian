{
  "recentFiles": [
    {
      "basename": "⌨️ Java 프로토타입 패턴 구현",
      "path": "06. Code Notes/Area/Java/⌨️ Java 프로토타입 패턴 구현.md"
    },
    {
      "basename": "🏛️ 프로토타입 패턴",
      "path": "02. MOC/🏛️ 프로토타입 패턴.md"
    },
    {
      "basename": "⌨️ Python 프로토타입 패턴 구현",
      "path": "06. Code Notes/Area/Python/⌨️ Python 프로토타입 패턴 구현.md"
    },
    {
      "basename": "AI Note-Type Writing Guide",
      "path": "AI_Rules/AI Note-Type Writing Guide.md"
    },
    {
      "basename": "AI Obsidian Core Rules",
      "path": "AI_Rules/AI Obsidian Core Rules.md"
    },
    {
      "basename": "AI Knowledge Structuring Strategy",
      "path": "AI_Rules/AI Knowledge Structuring Strategy.md"
    },
    {
      "basename": "Home",
      "path": "02. MOC/Home.md"
    },
    {
      "basename": "📚 프로토타입 패턴 활용 사례",
      "path": "05. Reference Notes/Web/📚 프로토타입 패턴 활용 사례.md"
    },
    {
      "basename": "📚 YAGNI (You Aren't Gonna Need It)",
      "path": "05. Reference Notes/Web/📚 YAGNI (You Aren't Gonna Need It).md"
    },
    {
      "basename": "🏛️ GoF 디자인 패턴",
      "path": "02. MOC/🏛️ GoF 디자인 패턴.md"
    },
    {
      "basename": "📝 프로토타입 패턴의 장점과 단점",
      "path": "03. Permanent Notes/📝 프로토타입 패턴의 장점과 단점.md"
    },
    {
      "basename": "📝 얕은 복사와 깊은 복사",
      "path": "03. Permanent Notes/📝 얕은 복사와 깊은 복사.md"
    },
    {
      "basename": "📝 프로토타입 패턴의 구조와 참여자",
      "path": "03. Permanent Notes/📝 프로토타입 패턴의 구조와 참여자.md"
    },
    {
      "basename": "📝 프로토타입 패턴의 정의와 목적",
      "path": "03. Permanent Notes/📝 프로토타입 패턴의 정의와 목적.md"
    },
    {
      "basename": "🏛️ 소프트웨어 개발 원칙",
      "path": "02. MOC/🏛️ 소프트웨어 개발 원칙.md"
    },
    {
      "basename": "🏛️ 빌더 패턴",
      "path": "02. MOC/🏛️ 빌더 패턴.md"
    },
    {
      "basename": "📝 빌더 패턴과 다른 생성 패턴 비교",
      "path": "03. Permanent Notes/📝 빌더 패턴과 다른 생성 패턴 비교.md"
    },
    {
      "basename": "📝 빌더 패턴의 장단점",
      "path": "03. Permanent Notes/📝 빌더 패턴의 장단점.md"
    },
    {
      "basename": "⌨️ 빌더 패턴 구현 예제_Java (2025-06-09)",
      "path": "06. Code Notes/Area/Java/⌨️ 빌더 패턴 구현 예제_Java (2025-06-09).md"
    },
    {
      "basename": "🏛️ 추상 팩토리 패턴",
      "path": "02. MOC/🏛️ 추상 팩토리 패턴.md"
    },
    {
      "basename": "🏛️ 팩토리 메서드 패턴",
      "path": "02. MOC/🏛️ 팩토리 메서드 패턴.md"
    },
    {
      "basename": "🏛️ 싱글톤 패턴",
      "path": "02. MOC/🏛️ 싱글톤 패턴.md"
    },
    {
      "basename": "싱글톤 패턴 기본 개념",
      "path": "03. Permanent Notes/싱글톤 패턴 기본 개념.md"
    },
    {
      "basename": "🏛️ 오브젝트 - 조용호",
      "path": "02. MOC/🏛️ 오브젝트 - 조용호.md"
    }
  ],
  "omittedPaths": [],
  "omittedTags": [],
  "updateOn": "file-open",
  "omitBookmarks": false,
  "maxLength": 25,
  "openType": "tab"
}