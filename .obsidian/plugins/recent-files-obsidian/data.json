{
  "recentFiles": [
    {
      "basename": "🏛️ 빌더 패턴",
      "path": "02. MOC/🏛️ 빌더 패턴.md"
    },
    {
      "basename": "🏛️ GoF 디자인 패턴",
      "path": "02. MOC/🏛️ GoF 디자인 패턴.md"
    },
    {
      "basename": "🏛️ 추상 팩토리 패턴",
      "path": "02. MOC/🏛️ 추상 팩토리 패턴.md"
    },
    {
      "basename": "🏛️ 팩토리 메서드 패턴",
      "path": "02. MOC/🏛️ 팩토리 메서드 패턴.md"
    },
    {
      "basename": "🏛️ 싱글톤 패턴",
      "path": "02. MOC/🏛️ 싱글톤 패턴.md"
    },
    {
      "basename": "Home",
      "path": "02. MOC/Home.md"
    },
    {
      "basename": "싱글톤 패턴 기본 개념",
      "path": "03. Permanent Notes/싱글톤 패턴 기본 개념.md"
    },
    {
      "basename": "🏛️ 오브젝트 - 조용호",
      "path": "02. MOC/🏛️ 오브젝트 - 조용호.md"
    },
    {
      "basename": "⌨️ 유도성 부하 평활화 코드(colab)_py (2025-04-23)",
      "path": "06. Code Notes/Area/Python/⌨️ 유도성 부하 평활화 코드(colab)_py (2025-04-23).md"
    },
    {
      "basename": "⌨️ 혼자서 하는 틱택토_v1_py (2025-04-25)",
      "path": "06. Code Notes/Area/Python/⌨️ 혼자서 하는 틱택토_v1_py (2025-04-25).md"
    },
    {
      "basename": "⌨️ 객체 설계 효율 적인 코드 (오브젝트 - 조용호)_java (2025-04-15)",
      "path": "06. Code Notes/Area/Java/⌨️ 객체 설계 효율 적인 코드 (오브젝트 - 조용호)_java (2025-04-15).md"
    },
    {
      "basename": "⌨️ 최대 출력 슬립 구하기_py (2025-04-09)",
      "path": "06. Code Notes/Archive/⌨️ 최대 출력 슬립 구하기_py (2025-04-09).md"
    },
    {
      "basename": "📝 빌더 패턴과 다른 생성 패턴 비교",
      "path": "03. Permanent Notes/📝 빌더 패턴과 다른 생성 패턴 비교.md"
    },
    {
      "basename": "📝 빌더 패턴의 장단점",
      "path": "03. Permanent Notes/📝 빌더 패턴의 장단점.md"
    },
    {
      "basename": "⌨️ 빌더 패턴 구현 예제_Java (2025-06-09)",
      "path": "06. Code Notes/Area/Java/⌨️ 빌더 패턴 구현 예제_Java (2025-06-09).md"
    },
    {
      "basename": "⌨️ 싱글톤 Enum 방식_java (2025-06-05)",
      "path": "06. Code Notes/Area/Java/⌨️ 싱글톤 Enum 방식_java (2025-06-05).md"
    },
    {
      "basename": "⌨️ 싱글톤 Double-Checked Locking_java (2025-06-05)",
      "path": "06. Code Notes/Area/Java/⌨️ 싱글톤 Double-Checked Locking_java (2025-06-05).md"
    },
    {
      "basename": "⌨️ 싱글톤 Bill Pugh Solution_java (2025-06-05)",
      "path": "06. Code Notes/Area/Java/⌨️ 싱글톤 Bill Pugh Solution_java (2025-06-05).md"
    },
    {
      "basename": "⌨️ 추상 팩토리 패턴 Python 구현_python (2025-01-10)",
      "path": "06. Code Notes/Area/Python/⌨️ 추상 팩토리 패턴 Python 구현_python (2025-01-10).md"
    },
    {
      "basename": "⌨️ 팩토리 메서드 패턴 Java 구현_java (2025-06-07)",
      "path": "06. Code Notes/Area/Java/⌨️ 팩토리 메서드 패턴 Java 구현_java (2025-06-07).md"
    },
    {
      "basename": "⌨️ 추상 팩토리 패턴 Java 구현_java (2025-06-08)",
      "path": "06. Code Notes/Area/Java/⌨️ 추상 팩토리 패턴 Java 구현_java (2025-06-08).md"
    },
    {
      "basename": "📝 빌더 패턴의 구조",
      "path": "03. Permanent Notes/📝 빌더 패턴의 구조.md"
    },
    {
      "basename": "📝 빌더 패턴이란",
      "path": "03. Permanent Notes/📝 빌더 패턴이란.md"
    },
    {
      "basename": "프록시 패턴",
      "path": "03. Permanent Notes/프록시 패턴.md"
    },
    {
      "basename": "🏛️ 소프트웨어 개발 원칙",
      "path": "02. MOC/🏛️ 소프트웨어 개발 원칙.md"
    }
  ],
  "omittedPaths": [],
  "omittedTags": [],
  "updateOn": "file-open",
  "omitBookmarks": false,
  "maxLength": 25,
  "openType": "tab"
}