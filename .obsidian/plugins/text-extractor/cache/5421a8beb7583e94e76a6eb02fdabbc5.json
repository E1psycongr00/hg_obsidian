{"path":"attachments/pdf/lec4.pdf","text":"Lecture 4 – Nondeterministic Finite Automata (NFA) COSE215: Theory of Computation Jihyeok Park 2023 Spring COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 1 / 24 Recall 1 Deterministic Finite Automata (DFA) • Definition • Transition Diagram and Transition Table • Extended Transition Function • Acceptance of a Word • Language of DFA (Regular Language) • Examples COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 2 / 24 Contents 1. Nondeterministic Finite Automata (NFA) Definition Transition Diagram and Transition Table Extended Transition Function Language of NFA Examples Equivalence of DFA and NFA DFA → NFA DFA ← NFA (Subset Construction) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 3 / 24 Definition of NFA Definition (Nondeterministic Finite Automaton (NFA)) A nondeterministic finite automaton is a 5-tuple: N = (Q, Σ, δ, q0, F ) • Q is a finite set of states • Σ is a finite set of symbols • δ : Q × Σ → P(Q) is the transition function • q0 ∈ Q is the initial state • F ⊆ Q is the set of final states N = ({q0, q1, q2}, {0, 1}, δ, q0, {q2}) δ(q0, 0) = {q0, q1} δ(q1, 0) = {q2} δ(q2, 0) = ∅ δ(q0, 1) = {q0} δ(q1, 1) = ∅ δ(q2, 1) = ∅ COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 4 / 24 Definition of NFA // The type definitions of states and symbols type State = Int type Symbol = Char // The definition of NFA case class NFA( states: Set[State], symbols: Set[Symbol], trans: Map[(State, Symbol), Set[State]], initState: State, finalStates: Set[State], ) // An example of NFA val nfa: NFA = NFA( states = Set(0, 1, 2), symbols = Set('0', '1'), trans = Map( (0, '0') -> Set(0, 1), (1, '0') -> Set(2), (2, '0') -> Set(), (0, '1') -> Set(0), (1, '1') -> Set(), (2, '1') -> Set(), ), initState = 0, finalStates = Set(2), ) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 5 / 24 Transition Diagram and Transition Table N = ({q0, q1, q2}, {0, 1}, δ, q0, {q2}) δ(q0, 0) = {q0, q1} δ(q1, 0) = {q2} δ(q2, 0) = ∅ δ(q0, 1) = {q0} δ(q1, 1) = ∅ δ(q2, 1) = ∅ Transition Diagram q0start q1 q2 0, 1 0 0 Transition Table q 0 1 → q0 {q0, q1} {q0} q1 {q2} ∅ ∗q2 ∅ ∅ COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 6 / 24 Extended Transition Function Definition (Extended Transition Function) For a given NFA N = (Q, Σ, δ, q0, F ), the extended transition function δ∗ : Q × Σ∗ → P(Q) is defined as follows: • (Basis Case) δ∗(q, ϵ) = {q} • (Induction Case) δ∗(q, aw ) = ⋃q′∈δ(q,a) δ∗(q′, w ) N = q0start q1 q2 0, 1 0 0 δ∗(q0, 100) = ⋃q′∈δ(q0,1) δ∗(q′, 00) = δ∗(q0, 00) = ⋃q′∈δ(q0,0) δ∗(q′, 0) = δ∗(q0, 0) ∪ δ∗(q1, 0) = ⋃q′∈δ(q0,0) δ∗(q′, ϵ) ∪ ⋃q′∈δ(q1,0) δ∗(q′, ϵ) = δ∗(q0, ϵ) ∪ δ∗(q1, ϵ) ∪ δ∗(q2, ϵ) = {q0, q1, q2} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 7 / 24 Extended Transition Function Definition (Extended Transition Function) For a given NFA N = (Q, Σ, δ, q0, F ), the extended transition function δ∗ : Q × Σ∗ → P(Q) is defined as follows: • (Basis Case) δ∗(q, ϵ) = {q} • (Induction Case) δ∗(q, aw ) = ⋃q′∈δ(q,a) δ∗(q′, w ) N = q0start q1 q2 0, 1 0 0 δ∗(q0, 100) = ⋃q′∈δ(q0,1) δ∗(q′, 00) = δ∗(q0, 00) = ⋃q′∈δ(q0,0) δ∗(q′, 0) = δ∗(q0, 0) ∪ δ∗(q1, 0) = ⋃q′∈δ(q0,0) δ∗(q′, ϵ) ∪ ⋃q′∈δ(q1,0) δ∗(q′, ϵ) = δ∗(q0, ϵ) ∪ δ∗(q1, ϵ) ∪ δ∗(q2, ϵ) = {q0, q1, q2} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 7 / 24 Extended Transition Function // The type definition of words type Word = String // A helper function to extract first symbol and rest of word object `<|` { def unapply(w: Word) = w.headOption.map((_, w.drop(1))) } // The extended transition function of NFA def extTrans(nfa: NFA)(q: State, w: Word): Set[State] = w match case \"\" => Set(q) case a <| x => nfa.trans(q, a).flatMap(p => extTrans(nfa)(p, x)) // An example transition for a word \"100\" extTrans(nfa)(0, \"100\") // Set(0, 1, 2) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 8 / 24 Acceptance of a Word Finite AutomatonWord <latexit sha1_base64=\"G4NrL4+FchmdNAyoq1HYtt9oFXI=\">AAAB6HicbVDLTgJBEOzFF+IL9ehlIjHxRHYNUY9ELx4hkUcCGzI79MLI7OxmZlZDCF/gxYPGePWTvPk3DrAHBSvppFLVne6uIBFcG9f9dnJr6xubW/ntws7u3v5B8fCoqeNUMWywWMSqHVCNgktsGG4EthOFNAoEtoLR7cxvPaLSPJb3ZpygH9GB5CFn1Fip/tQrltyyOwdZJV5GSpCh1it+dfsxSyOUhgmqdcdzE+NPqDKcCZwWuqnGhLIRHWDHUkkj1P5kfuiUnFmlT8JY2ZKGzNXfExMaaT2OAtsZUTPUy95M/M/rpCa89idcJqlByRaLwlQQE5PZ16TPFTIjxpZQpri9lbAhVZQZm03BhuAtv7xKmhdl77JcqVdK1ZssjjycwCmcgwdXUIU7qEEDGCA8wyu8OQ/Oi/PufCxac042cwx/4Hz+AOejjQQ=</latexit>w yes no Definition (Acceptance of a Word) For a given NFA N = (Q, Σ, δ, q0, F ), we say that N accepts a word w ∈ Σ∗ if and only if δ∗(q0, w ) ∩ F ̸= ∅ // The acceptance of a word by NFA def accept(nfa: NFA)(w: Word): Boolean = val curStates: Set[State] = extTrans(nfa)(nfa.initState, w) curStates.intersect(nfa.finalStates).nonEmpty // An example acceptance of a word \"100\" accept(nfa)(\"100\") // true COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 9 / 24 Language of NFA Definition (Language of NFA) For a given NFA N = (Q, Σ, δ, q0, F ), the language of N is defined as follows: L(N) = {w ∈ Σ∗ | N accepts w } N = q0start q1 q2 0, 1 0 0 L(N) = {w 00 | w ∈ {0, 1}∗} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 10 / 24 Language of NFA Definition (Language of NFA) For a given NFA N = (Q, Σ, δ, q0, F ), the language of N is defined as follows: L(N) = {w ∈ Σ∗ | N accepts w } N = q0start q1 q2 0, 1 0 0 L(N) = {w 00 | w ∈ {0, 1}∗} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 10 / 24 Language of NFA Definition (Language of NFA) For a given NFA N = (Q, Σ, δ, q0, F ), the language of N is defined as follows: L(N) = {w ∈ Σ∗ | N accepts w } N = q0start q1 q2 0, 1 0 0 L(N) = {w 00 | w ∈ {0, 1}∗} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 10 / 24 Examples • L = {anb | n ≥ 0} • L = {w ∈ {0, 1}∗ | w contains at least two 0′s} • L = {w ∈ {0, 1}∗ | w contains exactly two 0′s} • L = {w ∈ {0, 1}∗ | w has three consecutive 0′s} • L = {w ∈ {0, 1}∗ | N(w ) ≡ 0 (mod 3)} where N(w ) is a natural number represented by w . • L = {anbn | n ≥ 0} – IMPOSSIBLE (∄ NFA N. L(N) = L) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 11 / 24 Examples • L = {anb | n ≥ 0} • L = {w ∈ {0, 1}∗ | w contains at least two 0′s} • L = {w ∈ {0, 1}∗ | w contains exactly two 0′s} • L = {w ∈ {0, 1}∗ | w has three consecutive 0′s} • L = {w ∈ {0, 1}∗ | N(w ) ≡ 0 (mod 3)} where N(w ) is a natural number represented by w . • L = {anbn | n ≥ 0} – IMPOSSIBLE (∄ NFA N. L(N) = L) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 11 / 24 Equivalence of DFA and NFA D = q0start q1 q2 0 1 0 1 0 1 L(D) = {w 00 | w ∈ {0, 1} ∗} = L(N) N = q0start q1 q2 0, 1 0 0 COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 12 / 24 Equivalence of DFA and NFA Is there any language that is the language of a DFA but not the language of an NFA, or vice versa? <latexit sha1_base64=\"n92EN7qKro3HBPjOFkdf9pTRcuY=\">AAAB/3icbVDLSgMxFM3UV62vUcGNm2ARqosyI0VdFt24rGgf0BlKJs20oUlmSDJCGWfhr7hxoYhbf8Odf2PazkJbDwQO59zLPTlBzKjSjvNtFZaWV1bXiuuljc2t7R17d6+lokRi0sQRi2QnQIowKkhTU81IJ5YE8YCRdjC6nvjtByIVjcS9HsfE52ggaEgx0kbq2QceR3qIEUsbWSX17uiAo9PspGeXnaozBVwkbk7KIEejZ395/QgnnAiNGVKq6zqx9lMkNcWMZCUvUSRGeIQGpGuoQJwoP53mz+CxUfowjKR5QsOp+nsjRVypMQ/M5CStmvcm4n9eN9HhpZ9SESeaCDw7FCYM6ghOyoB9KgnWbGwIwpKarBAPkURYm8pKpgR3/suLpHVWdc+rtdtauX6V11EEh+AIVIALLkAd3IAGaAIMHsEzeAVv1pP1Yr1bH7PRgpXv7IM/sD5/AI22lc4=</latexit> P(⌃⇤) <latexit sha1_base64=\"5pd9oYCiXpkC+EmQoYbKXvlYm7Q=\">AAAB9HicbVDLSgNBEJyNrxhfUY9eBoMQL2FXgnqMD8SDhwjmAckSZiezyZDZ2XWmNxiWfIcXD4p49WO8+TdOkj1oYkFDUdVNd5cXCa7Btr+tzNLyyupadj23sbm1vZPf3avrMFaU1WgoQtX0iGaCS1YDDoI1I8VI4AnW8AZXE78xZErzUD7AKGJuQHqS+5wSMJJ7V2wDe4Lk+uZifNzJF+ySPQVeJE5KCihFtZP/andDGgdMAhVE65ZjR+AmRAGngo1z7ViziNAB6bGWoZIETLvJ9OgxPjJKF/uhMiUBT9XfEwkJtB4FnukMCPT1vDcR//NaMfjnbsJlFAOTdLbIjwWGEE8SwF2uGAUxMoRQxc2tmPaJIhRMTjkTgjP/8iKpn5Sc01L5vlyoXKZxZNEBOkRF5KAzVEG3qIpqiKJH9Ixe0Zs1tF6sd+tj1pqx0pl99AfW5w/d25GG</latexit> L(DFA) <latexit sha1_base64=\"oxvdNCL/UJOgIqA9vvWRZPGbO1U=\">AAAB9HicbVBNS8NAEN3Ur1q/qh69LBahXkoiRT1WBfEgUsF+QBvKZrtpl242cXdSLKG/w4sHRbz6Y7z5b9y2OWjrg4HHezPMzPMiwTXY9reVWVpeWV3Lruc2Nre2d/K7e3UdxoqyGg1FqJoe0UxwyWrAQbBmpBgJPMEa3uBq4jeGTGkeygcYRcwNSE9yn1MCRnJvi21gT5DcXV+Mjzv5gl2yp8CLxElJAaWodvJf7W5I44BJoIJo3XLsCNyEKOBUsHGuHWsWETogPdYyVJKAaTeZHj3GR0bpYj9UpiTgqfp7IiGB1qPAM50Bgb6e9ybif14rBv/cTbiMYmCSzhb5scAQ4kkCuMsVoyBGhhCquLkV0z5RhILJKWdCcOZfXiT1k5JzWirflwuVyzSOLDpAh6iIHHSGKugGVVENUfSIntErerOG1ov1bn3MWjNWOrOP/sD6/AHtK5GQ</latexit> L(NFA) ? ? <latexit sha1_base64=\"t3AFnXOnd4TRIQ1cdPhmks19jx4=\">AAACAHicbVDLSsNAFJ3UV62vqAsXbgaL4KokUtRl0Y3LCvYBbSyT6aQdOpmEmRuxhGz8FTcuFHHrZ7jzb5y2EbT1wIUz59zL3Hv8WHANjvNlFZaWV1bXiuuljc2t7R17d6+po0RR1qCRiFTbJ5oJLlkDOAjWjhUjoS9Yyx9dTfzWPVOaR/IWxjHzQjKQPOCUgJF69kEX2AMApCS7k/jn4Wc9u+xUnCnwInFzUkY56j37s9uPaBIyCVQQrTuuE4OXEgWcCpaVuolmMaEjMmAdQyUJmfbS6QEZPjZKHweRMiUBT9XfEykJtR6HvukMCQz1vDcR//M6CQQXXsplnACTdPZRkAgMEZ6kgftcMQpibAihiptdMR0SRSiYzEomBHf+5EXSPK24Z5XqTbVcu8zjKKJDdIROkIvOUQ1dozpqIIoy9IRe0Kv1aD1bb9b7rLVg5TP76A+sj2/0dZdL</latexit> a nb <latexit sha1_base64=\"/zCSF5YzKE75PzK8Z+pFFvsDV74=\">AAACAnicbVDLSgNBEJz1GeNr1ZN4GQyCp7ArQT0GvXiMYB6QxDA76SRDZmeXmV4xLMGLv+LFgyJe/Qpv/o2Th6CJBQPVVd30dAWxFAY978tZWFxaXlnNrGXXNza3tt2d3YqJEs2hzCMZ6VrADEihoIwCJdRiDSwMJFSD/uXIr96BNiJSNziIoRmyrhIdwRlaqeXuNxDuETFlw1tFf4rAFi035+W9Meg88ackR6YotdzPRjviSQgKuWTG1H0vxmbKNAouYZhtJAZixvusC3VLFQvBNNPxCUN6ZJU27UTaPoV0rP6eSFlozCAMbGfIsGdmvZH4n1dPsHPeTIWKEwTFJ4s6iaQY0VEetC00cJQDSxjXwv6V8h7TjKNNLWtD8GdPnieVk7x/mi9cF3LFi2kcGXJADskx8ckZKZIrUiJlwskDeSIv5NV5dJ6dN+d90rrgTGf2yB84H9+H45gr</latexit> a nb n <latexit sha1_base64=\"Rroad1FYVO3+v6gzwOnKbhzw218=\">AAAB83icbVBNS8NAEJ3Ur1q/qh69LBbBU0lE1GPRi8cK9gPaUDbbTbt0swm7E7WE/g0vHhTx6p/x5r9x2+agrQ8GHu/NMDMvSKQw6LrfTmFldW19o7hZ2tre2d0r7x80TZxqxhsslrFuB9RwKRRvoEDJ24nmNAokbwWjm6nfeuDaiFjd4zjhfkQHSoSCUbRS97GL/AkRM9ed9MoVt+rOQJaJl5MK5Kj3yl/dfszSiCtkkhrT8dwE/YxqFEzySambGp5QNqID3rFU0YgbP5vdPCEnVumTMNa2FJKZ+nsio5Ex4yiwnRHFoVn0puJ/XifF8MrPhEpS5IrNF4WpJBiTaQCkLzRnKMeWUKaFvZWwIdWUoY2pZEPwFl9eJs2zqndRPb87r9Su8ziKcATHcAoeXEINbqEODWCQwDO8wpuTOi/Ou/Mxby04+cwh/IHz+QM9bpHT</latexit> w00 <latexit sha1_base64=\"GYtzptKTolIxAeYLkDREUwkwl5Q=\">AAACHXicbVDLSgMxFM34tr6qLt0Ei1A3ZUaLuiy6cSUK1hY6pWQyt20w8zC501qG+RE3/oobF4q4cCP+jWntQlsPJBzOuZfkHC+WQqNtf1kzs3PzC4tLy7mV1bX1jfzm1o2OEsWhyiMZqbrHNEgRQhUFSqjHCljgSah5t2dDv9YDpUUUXuMghmbAOqFoC87QSK182U1pn7qB8M3FsOt56UVW7O9TF+4S0aM2dRHuMaXFIPJpRg+Nk7XyBbtkj0CniTMmBTLGZSv/4foRTwIIkUumdcOxY2ymTKHgErKcm2iIGb9lHWgYGrIAdDMdpcvonlF82o6UOSHSkfp7I2WB1oPAM5PDBHrSG4r/eY0E2yfNVIRxghDyn4faiaQY0WFV1BcKOMqBIYwrYf5KeZcpxtEUmjMlOJORp8nNQck5KpWvyoXK6biOJbJDdkmROOSYVMg5uSRVwskDeSIv5NV6tJ6tN+v9Z3TGGu9skz+wPr8BQSugJA==</latexit> {w | N(w) ⌘ 0 (mod 3)} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 13 / 24 Equivalence of DFA and NFA Is there any language that is the language of a DFA but not the language of an NFA, or vice versa? No! DFA and NFA are equivalent. <latexit sha1_base64=\"n92EN7qKro3HBPjOFkdf9pTRcuY=\">AAAB/3icbVDLSgMxFM3UV62vUcGNm2ARqosyI0VdFt24rGgf0BlKJs20oUlmSDJCGWfhr7hxoYhbf8Odf2PazkJbDwQO59zLPTlBzKjSjvNtFZaWV1bXiuuljc2t7R17d6+lokRi0sQRi2QnQIowKkhTU81IJ5YE8YCRdjC6nvjtByIVjcS9HsfE52ggaEgx0kbq2QceR3qIEUsbWSX17uiAo9PspGeXnaozBVwkbk7KIEejZ395/QgnnAiNGVKq6zqx9lMkNcWMZCUvUSRGeIQGpGuoQJwoP53mz+CxUfowjKR5QsOp+nsjRVypMQ/M5CStmvcm4n9eN9HhpZ9SESeaCDw7FCYM6ghOyoB9KgnWbGwIwpKarBAPkURYm8pKpgR3/suLpHVWdc+rtdtauX6V11EEh+AIVIALLkAd3IAGaAIMHsEzeAVv1pP1Yr1bH7PRgpXv7IM/sD5/AI22lc4=</latexit> P(⌃⇤) <latexit sha1_base64=\"/zCSF5YzKE75PzK8Z+pFFvsDV74=\">AAACAnicbVDLSgNBEJz1GeNr1ZN4GQyCp7ArQT0GvXiMYB6QxDA76SRDZmeXmV4xLMGLv+LFgyJe/Qpv/o2Th6CJBQPVVd30dAWxFAY978tZWFxaXlnNrGXXNza3tt2d3YqJEs2hzCMZ6VrADEihoIwCJdRiDSwMJFSD/uXIr96BNiJSNziIoRmyrhIdwRlaqeXuNxDuETFlw1tFf4rAFi035+W9Meg88ackR6YotdzPRjviSQgKuWTG1H0vxmbKNAouYZhtJAZixvusC3VLFQvBNNPxCUN6ZJU27UTaPoV0rP6eSFlozCAMbGfIsGdmvZH4n1dPsHPeTIWKEwTFJ4s6iaQY0VEetC00cJQDSxjXwv6V8h7TjKNNLWtD8GdPnieVk7x/mi9cF3LFi2kcGXJADskx8ckZKZIrUiJlwskDeSIv5NV5dJ6dN+d90rrgTGf2yB84H9+H45gr</latexit> a nb n <latexit sha1_base64=\"FfGvy2Bl9BlkuPdjQXa1mWGKkP0=\">AAACBnicbVDLSgMxFM3UV62vUZciBItQN2VGiroR6gNxIVLBPqAtJZOmbWjmQXJHLENXbvwVNy4Uces3uPNvzLQjaOuBwLnn3MvNPU4guALL+jJSM7Nz8wvpxczS8srqmrm+UVF+KCkrU1/4suYQxQT3WBk4CFYLJCOuI1jV6Z/FfvWOScV97xYGAWu6pOvxDqcEtNQyt69yDWD3EJ1fnAz38DH+qa/jumVmrbw1Ap4mdkKyKEGpZX422j4NXeYBFUSpum0F0IyIBE4FG2YaoWIBoX3SZXVNPeIy1YxGZwzxrlbauONL/TzAI/X3RERcpQauoztdAj016cXif149hM5RM+JeEALz6HhRJxQYfBxngttcMgpioAmhkuu/YtojklDQyWV0CPbkydOksp+3D/KFm0K2eJrEkUZbaAflkI0OURFdohIqI4oe0BN6Qa/Go/FsvBnv49aUkcxsoj8wPr4BsymXXw==</latexit> L(DFA) = L(NFA) <latexit sha1_base64=\"t3AFnXOnd4TRIQ1cdPhmks19jx4=\">AAACAHicbVDLSsNAFJ3UV62vqAsXbgaL4KokUtRl0Y3LCvYBbSyT6aQdOpmEmRuxhGz8FTcuFHHrZ7jzb5y2EbT1wIUz59zL3Hv8WHANjvNlFZaWV1bXiuuljc2t7R17d6+po0RR1qCRiFTbJ5oJLlkDOAjWjhUjoS9Yyx9dTfzWPVOaR/IWxjHzQjKQPOCUgJF69kEX2AMApCS7k/jn4Wc9u+xUnCnwInFzUkY56j37s9uPaBIyCVQQrTuuE4OXEgWcCpaVuolmMaEjMmAdQyUJmfbS6QEZPjZKHweRMiUBT9XfEykJtR6HvukMCQz1vDcR//M6CQQXXsplnACTdPZRkAgMEZ6kgftcMQpibAihiptdMR0SRSiYzEomBHf+5EXSPK24Z5XqTbVcu8zjKKJDdIROkIvOUQ1dozpqIIoy9IRe0Kv1aD1bb9b7rLVg5TP76A+sj2/0dZdL</latexit> a nb <latexit sha1_base64=\"Rroad1FYVO3+v6gzwOnKbhzw218=\">AAAB83icbVBNS8NAEJ3Ur1q/qh69LBbBU0lE1GPRi8cK9gPaUDbbTbt0swm7E7WE/g0vHhTx6p/x5r9x2+agrQ8GHu/NMDMvSKQw6LrfTmFldW19o7hZ2tre2d0r7x80TZxqxhsslrFuB9RwKRRvoEDJ24nmNAokbwWjm6nfeuDaiFjd4zjhfkQHSoSCUbRS97GL/AkRM9ed9MoVt+rOQJaJl5MK5Kj3yl/dfszSiCtkkhrT8dwE/YxqFEzySambGp5QNqID3rFU0YgbP5vdPCEnVumTMNa2FJKZ+nsio5Ex4yiwnRHFoVn0puJ/XifF8MrPhEpS5IrNF4WpJBiTaQCkLzRnKMeWUKaFvZWwIdWUoY2pZEPwFl9eJs2zqndRPb87r9Su8ziKcATHcAoeXEINbqEODWCQwDO8wpuTOi/Ou/Mxby04+cwh/IHz+QM9bpHT</latexit> w00 <latexit sha1_base64=\"GYtzptKTolIxAeYLkDREUwkwl5Q=\">AAACHXicbVDLSgMxFM34tr6qLt0Ei1A3ZUaLuiy6cSUK1hY6pWQyt20w8zC501qG+RE3/oobF4q4cCP+jWntQlsPJBzOuZfkHC+WQqNtf1kzs3PzC4tLy7mV1bX1jfzm1o2OEsWhyiMZqbrHNEgRQhUFSqjHCljgSah5t2dDv9YDpUUUXuMghmbAOqFoC87QSK182U1pn7qB8M3FsOt56UVW7O9TF+4S0aM2dRHuMaXFIPJpRg+Nk7XyBbtkj0CniTMmBTLGZSv/4foRTwIIkUumdcOxY2ymTKHgErKcm2iIGb9lHWgYGrIAdDMdpcvonlF82o6UOSHSkfp7I2WB1oPAM5PDBHrSG4r/eY0E2yfNVIRxghDyn4faiaQY0WFV1BcKOMqBIYwrYf5KeZcpxtEUmjMlOJORp8nNQck5KpWvyoXK6biOJbJDdkmROOSYVMg5uSRVwskDeSIv5NV6tJ6tN+v9Z3TGGu9skz+wPr8BQSugJA==</latexit> {w | N(w) ⌘ 0 (mod 3)} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 14 / 24 Equivalence of DFA and NFA Theorem (Equivalence of DFA and NFA) A language L is the language L(D) of a DFA D if and only if L is the language L(N) of an NFA N. Proof) By the following two theorems. Theorem (DFA to NFA) For a given DFA D = (Q, Σ, δ, q, F ), ∃ NFA N. L(D) = L(N). Theorem (NFA to DFA – Subset Construction) For a given NFA N = (Q, Σ, δ, q0, F ), ∃ DFA D. L(D) = L(N). COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 15 / 24 DFA → NFA Theorem (DFA to NFA) For a given DFA D = (Q, Σ, δD, q0, F ), ∃ NFA N. L(D) = L(N). Proof) Define an NFA N = (Q, Σ, δN , q0, F ) where • ∀q ∈ Q. ∀a ∈ Σ. δN (q, a) = {δD(q, a)} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 16 / 24 DFA → NFA – Example DFA D q0start q1 q2 0 1 0 1 0 1 q 0 1 → q0 q1 q0 q1 q2 q0 ∗q2 q2 q0 NFA N q0start q1 q2 0 1 0 1 0 1 q 0 1 → q0 {q1} {q0} q1 {q2} {q0} ∗q2 {q2} {q0} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 17 / 24 DFA → NFA – Proof Lemma ∀q ∈ Q. ∀w ∈ Σ∗. δ∗ N (q, w ) = {δ∗ D(q, w )}. Proof) By induction on the length of word. • (Base Case) δ∗ N (q, ϵ) = {q} = {δ∗ D(q, ϵ)}. • (Inductive Case) Assume it holds for w (I.H.). δ∗ N (q, aw ) = ⋃ q′∈δN (q,a) δ∗ N (q′, w ) (∵ definition of δ∗ N ) = ⋃ q′∈{δD (q,a)} δ∗ N (q′, w ) (∵ definition of δN ) = δ∗ N (δD(q, a), w ) = {δ∗ D(δD(q, a), w )} (∵ I.H.) = {δ∗ D(q, aw )} (∵ definition of δ∗) Then, w ∈ L(D) ⇐⇒ δ∗ D(q0, w ) ∈ F (∵ definition of L(D)) ⇐⇒ {δ∗ D(q0, w )} ∩ F ̸= ∅ (∵ set theory) ⇐⇒ δ∗ N (q0, w ) ∩ F ̸= ∅ (∵ above lemma) ⇐⇒ w ∈ L(N) (∵ definition of L(N)) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 18 / 24 DFA ← NFA (Subset Construction) Theorem (NFA to DFA – Subset Construction) For a given NFA N = (Q, Σ, δN , q0, F ), ∃ DFA D. L(D) = L(N). Proof) Define a DFA D = (QD, Σ, δD, {q0}, FD) where • QD = P(Q) • ∀S ∈ QD. ∀a ∈ Σ. δD(S, a) = ⋃ q∈S δN (q, a) • FD = {S ∈ QD | S ∩ F ̸= ∅} COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 19 / 24 DFA ← NFA (Subset Construction) – Example DFA D q 0 1 ∅ ∅ ∅ → {q0} {q0, q1} {q0} {q1} {q2} ∅ ∗{q2} ∅ ∅ {q0, q1} {q0, q1, q2} {q0} ∗{q0, q2} {q0, q1} {q0} ∗{q1, q2} {q2} ∅ ∗{q0, q1, q2} {q0, q1, q2} {q0} NFA N q0start q1 q2 0, 1 0 0 q 0 1 → q0 {q0, q1} {q0} q1 {q2} ∅ ∗q2 ∅ ∅ COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 20 / 24 DFA ← NFA (Subset Construction) – Example DFA D {q0}start {q0, q1} {q0, q1, q2} 0 1 0 1 0 1 q 0 1 → {q0} {q0, q1} {q0} {q0, q1} {q0, q1, q2} {q0} ∗{q0, q1, q2} {q0, q1, q2} {q0} NFA N q0start q1 q2 0, 1 0 0 q 0 1 → q0 {q0, q1} {q0} q1 {q2} ∅ ∗q2 ∅ ∅ COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 21 / 24 DFA ← NFA (Subset Construction) – Proof Lemma ∀S ∈ QD. ∀w ∈ Σ∗. δ∗ D(S, w ) = ⋃q∈S δ∗ N (q, w ) Proof) By induction on the length of word. • (Base Case) δ∗ N (S, ϵ) = S = ⋃q∈S δ∗ N (q, ϵ). • (Inductive Case) Assume it holds for w (I.H.). δ∗ D(S, aw ) = δ∗ D(δD(S, a), w ) (∵ definition of δ∗ D) = δ∗ D( ⋃q∈S δN (q, a), w ) (∵ definition of δD) = ⋃q∈S ⋃ q′∈δN (q,a) δ∗ N (q′, w ) (∵ I.H.) = ⋃ q∈S δ∗ N (q, aw ) (∵ definition of δ∗ N ) Then, w ∈ L(D) ⇐⇒ δ∗ D({q0}, w ) ∈ FD (∵ definition of L(D)) ⇐⇒ δ∗ D({q0}, w ) ∩ FN ̸= ∅ (∵ definition of FD) ⇐⇒ δ∗ N (q0, w ) ∩ F ̸= ∅ (∵ above lemma) ⇐⇒ w ∈ L(N) (∵ definition of L(N)) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 22 / 24 Summary 1. Nondeterministic Finite Automata (NFA) Definition Transition Diagram and Transition Table Extended Transition Function Language of NFA Examples Equivalence of DFA and NFA DFA → NFA DFA ← NFA (Subset Construction) COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 23 / 24 Next Lecture • ϵ-Nondeterministic Finite Automata (ϵ-NFA) Jihyeok Park jihyeok_park@korea.ac.kr https://plrg.korea.ac.kr COSE215 @ Korea University Lecture 4 – NFA March 20, 2023 24 / 24","libVersion":"0.3.2","langs":""}